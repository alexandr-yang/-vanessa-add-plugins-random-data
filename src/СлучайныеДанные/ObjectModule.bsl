
#Область ПрограммныйИнтерфейсПлагина

// Описание плагина 
////
Функция ОписаниеПлагина(ТипыПлагинов) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", ТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "Случайные данные");
	Результат.Вставить("Версия", "1.0.0");
	Результат.Вставить("Автор", "Александр Янг");
	Результат.Вставить("Репозиторий", "https://github.com/alexandr-yang/random-data");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Инициализация плагина 
////
Процедура Инициализация(Параметры) Экспорт 
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область Справочники 

// Случайный элемент справочника 
//
// Параметры:
//   Имя (Строка) - Имя справочника
//   ПараметрыОтбора (Массив \ Неопределено) - Массив структур параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение: 
//   СправочникСсылка
//   Неопределено
////
Функция СлучайныйЭлементСправочника(Имя, ПараметрыОтбора = Неопределено) Экспорт 
	
	Массив = МассивСлучайныхЭлементовСправочника(Имя, 1, , ПараметрыОтбора);
	
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Возврат Массив[0];
	
КонецФункции

// Массив случайных элементов справочника 
//
// Параметры:
//   Имя (Строка) - Имя справочника
//   Количество (Число) - Максимальное количество элементов справочника
//   Уникальные (Булево \ Неопределено) - Исключить повторяющиеся элементы
//   ПараметрыОтбора (Массив \ Неопределено) - Массив структур параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение:
//   Массив [ СправочникСсылка ]
////
Функция МассивСлучайныхЭлементовСправочника(Имя, Количество, Уникальные = Истина, ПараметрыОтбора = Неопределено) Экспорт 
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ВыборкаДанных");
	
	ДополнительныеПоля = "";	
	ПервыеКоличество = ?(МаксимальноеКоличество = 0, "",
		"ПЕРВЫЕ " + Формат(МаксимальноеКоличество, "ЧДЦ=; ЧГ=0"));
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Ссылка");
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Для Каждого ЭлементМассива Из ПараметрыОтбора Цикл
			Если ЕстьРеквизитМетаданных("Справочники", Имя, ЭлементМассива.ИмяРеквизита) Тогда 
				НовыйЭлемент = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ВидСравнения = ЭлементМассива.ВидСравнения;
				НовыйЭлемент.Использование = Истина;
				НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементМассива.ИмяРеквизита);
				НовыйЭлемент.ПравоеЗначение = ЭлементМассива.Значение;
				
				Если МассивПолей.Найти(ЭлементМассива.ИмяРеквизита) = Неопределено Тогда  
					ДополнительныеПоля = ДополнительныеПоля + 
						"Данные." + ЭлементМассива.ИмяРеквизита + " КАК " + СтрЗаменить(ЭлементМассива.ИмяРеквизита, ".", "_") + "," + Символы.ПС
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	ТекстЗапроса = "
		|ВЫБРАТЬ " + ПервыеКоличество + "
		|	" + ДополнительныеПоля + "
		|	Данные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + Имя +  " КАК Данные
		|";
	
	СхемаКомпоновкиДанных.НаборыДанных.ВыборкаДанных.Запрос = ТекстЗапроса;
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;		
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка." + Имя));
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Массив = Новый Массив;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат Массив;
	КонецЕсли;
		
	МассивСлучайныхЧисел = МассивСлучайныхЧисел(Количество, 0, ТаблицаЗначений.Количество() - 1, Уникальные);
		
	Для Каждого ЭлементМассива Из МассивСлучайныхЧисел Цикл 
		Массив.Добавить(ТаблицаЗначений[ЭлементМассива].Ссылка);
	КонецЦикла;
		
	Возврат Массив;
	
КонецФункции

// Фиксированный массив случайных элементов справочника 
//
// Имя (Строка) - Имя справочника
// Количество (Число) - Максимальное количество элементов справочника
// Уникальные (Булево \ Неопределено) - Исключить повторяющиеся элементы
// ПараметрыОтбора (Массив \ Неопределено) - Массив структур параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение:
//   ФиксированныйМассив [ СправочникСсылка ]
////
Функция ФиксированныйМассивЭлементовСправочника(Имя, Количество, Уникальные = Истина, ПараметрыОтбора = Неопределено) Экспорт 
	
	Возврат МассивВФиксированыйМассив(
		МассивСлучайныхЭлементовСправочника(Имя, Количество, Уникальные, ПараметрыОтбора)
	);
	
КонецФункции

// Список значений случайных элементов справочника 
//
// Параметры:
//   Имя (Строка) - Имя справочника
//   Количество (Число) - Максимальное количество элементов справочника 
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//   ПараметрыОтбора (Структура) - Структура параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение:
//   СписокЗначений [ СправочникСсылка ]
////
Функция СписокЗначенийСлучайныхЭлементовСправочника(Имя, Количество, Уникальные = Истина, ПараметрыОтбора = Неопределено) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСлучайныхЭлементовСправочника(Имя, Количество, Уникальные, ПараметрыОтбора)
	);
	
КонецФункции

#КонецОбласти

#Область Документы

// Случайный документ 
//
// Параметры:
//   Имя (Строка) - Имя документ
//   ПараметрыОтбора (Структура) - Структура параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение:
//   ДокументСсылка
//   Неопределено
//// 
////
Функция СлучайныйДокумент(Имя, ПараметрыОтбора = Неопределено) Экспорт 
	
	Массив = МассивСлучайныхДокументов(Имя, 1, , ПараметрыОтбора);
	
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Возврат Массив[0];
	
КонецФункции

// Массив случайных документов 
//
// Параметры:
//   Имя (Строка) - Имя документа
//   Количество (Число) - Максимальное количество документов
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//   ПараметрыОтбора (Структура) - Структура параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение:
//   Массив [ ДокументСсылка ]
////
Функция МассивСлучайныхДокументов(Имя, Количество, Уникальные = Истина, ПараметрыОтбора = Неопределено) Экспорт 
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ВыборкаДанных");
	
	ДополнительныеПоля = "";
	ПервыеКоличество = ?(МаксимальноеКоличество = 0, "",
		"ПЕРВЫЕ " + Формат(МаксимальноеКоличество, "ЧДЦ=; ЧГ=0"));
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Ссылка");
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Для Каждого ЭлементМассива Из ПараметрыОтбора Цикл
			Если ЕстьРеквизитМетаданных("Документы", Имя, ЭлементМассива.ИмяРеквизита) Тогда 
				НовыйЭлемент = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.ВидСравнения = ЭлементМассива.ВидСравнения;
				НовыйЭлемент.Использование = Истина;
				НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементМассива.ИмяРеквизита);
				НовыйЭлемент.ПравоеЗначение = ЭлементМассива.Значение;
				
				Если МассивПолей.Найти(ЭлементМассива.ИмяРеквизита) = Неопределено Тогда 
					ДополнительныеПоля = ДополнительныеПоля + 
						"Данные." + ЭлементМассива.ИмяРеквизита + " КАК " + СтрЗаменить(ЭлементМассива.ИмяРеквизита, ".", "_") + "," + Символы.ПС
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ " + ПервыеКоличество + "
		|	" + ДополнительныеПоля + "
		|	Данные.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + Имя +  " КАК Данные
		|";
	
	СхемаКомпоновкиДанных.НаборыДанных.ВыборкаДанных.Запрос = ТекстЗапроса;
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;		
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка." + Имя));
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Массив = Новый Массив;

	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат Массив;	
	КонецЕсли;
	
	МассивСлучайныхЧисел = МассивСлучайныхЧисел(Количество, 0, ТаблицаЗначений.Количество() - 1, Уникальные);
		
	Для Каждого ЭлементМассива Из МассивСлучайныхЧисел Цикл 
		Массив.Добавить(ТаблицаЗначений[ЭлементМассива].Ссылка);
	КонецЦикла;
		
	Возврат Массив;
	
КонецФункции

// Фиксированный массив случайных документов 
//
// Параметры:
//   Имя (Строка) - Имя документ
//   Количество (Число) - Максимальное количество документов
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//   ПараметрыОтбора (Структура) - Структура параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение:
//   ФиксированныйМассив [ ДокументСсылка ]
////
Функция ФиксированныйМассивСлучайныхДокументов(Имя, Количество, Уникальные, ПараметрыОтбора) Экспорт 
	
	Возврат МассивВФиксированыйМассив(
		МассивСлучайныхДокументов(Имя, Количество, Уникальные, ПараметрыОтбора)
	);
	
КонецФункции

// Список значений случайных документов 
//
// Параметры:
//   Имя (Строка) - Имя документа
//   Количество (Число) - Максимальное количество документов
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//   ПараметрыОтбора (Структура) - Структура параметров отбора, формируется функцией ПолучитьСтруктуруПараметровОтбора
// 
// Возвращаемое значение:
//   СписокЗначений [ ДокументСсылка ]
////
Функция СписокЗначенийСлучайныхДокументов(Имя, Количество, Уникальные = Истина, ПараметрыОтбора = Неопределено) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСлучайныхДокументов(Имя, Количество, Уникальные, ПараметрыОтбора)
	);
	
КонецФункции

#КонецОбласти

#Область Массивы

// Случайный элемент массива или фиксированного массива 
//
// Параметры:
//   Масссив (Масссив \ ФиксированныйМассив) - Массив данных
// 
// Возвращаемое значение:
//   Произвольный \ Неопределено
////
Функция СлучайныйЭлементМассива(Массив) Экспорт 
	
	Массив = МассивСлучайныхЭлементовМассива(Массив, 1);
	
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Возврат Массив[0];
	
КонецФункции

// Массив случайных элементов массива или фиксированного массива 
//
// Параметры:
//   Масссив (Масссив \ ФиксированныйМассив) - Массив данных
//   Количество (Число) - Максимальное количество элементов массива
//   Уникальные (Булево) - Исключить повторяющиеся элементы
// 
// Возвращаемое значение:
//   Массив [ Произвольный ] 
////
Функция МассивСлучайныхЭлементовМассива(Массив, Количество, Уникальные = Истина) Экспорт 
	
	НовыйМассив = Новый Массив;
	
	Если Массив.Количество() = 0 Тогда
		Возврат НовыйМассив;	
	КонецЕсли;
	
	МассивСлучайныхЧисел = МассивСлучайныхЧисел(Количество, 0, Массив.Количество() - 1, Уникальные);
		
	Для Каждого ЭлементМассива Из МассивСлучайныхЧисел Цикл 
		НовыйМассив.Добавить(Массив[ЭлементМассива]);
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции

// Фиксированный массив случайных элементов массива или фиксированного массива 
//
// Параметры:
//   Масссив (Масссив \ ФиксированныйМассив) - Массив данных
//   Количество (Число) - Максимальное количество элементов массива
//   Уникальные (Булево) - Исключить повторяющиеся элементы
// 
// Возвращаемое значение:
//   ФиксированныйМассив [ Произвольный ] 
////
Функция ФиксированныйМассивСлучайныхЭлементовМассива(Массив, Количество, Уникальные = Истина) Экспорт 
	
	Возврат МассивВФиксированыйМассив(
		МассивСлучайныхЭлементовМассива(Массив, Количество, Уникальные)
	);
	
КонецФункции

// Список значений случайных элементов массива или фиксированного массива 
//
// Параметры:
//   Масссив (Масссив \ ФиксированныйМассив) - Массив данных
//   Количество (Число) - Максимальное количество элементов массива
//   Уникальные (Булево) - Исключить повторяющиеся элементы
// 
// Возвращаемое значение:
//   СписокЗначений [ Произвольный ]
////
Функция СписокЗначенийСлучайныхЭлементовМассива(Массив, Количество, Уникальные = Истина) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСлучайныхЭлементовМассива(Массив, Количество, Уникальные)
	);
	
КонецФункции

#КонецОбласти

#Область СпискиЗначений

// Случайный элемент списка значений 
//
// Параметры:
//   СписокЗначений (СписокЗначений) - Список данных
// 
// Возвращаемое значение:
//   Произвольный \ Неопределено
////
Функция СлучайныйЭлементСпискаЗначений(СписокЗначений) Экспорт 
	
	Массив = МассивСлучайныхЭлементовСпискаЗначений(СписокЗначений, 1);
	
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Возврат Массив[0];

КонецФункции

// Массив случайных элементов списка значений 
//
// Параметры:
//   СписокЗначений (СписокЗначений) - Список данных
//   Количество (Число) - Максимальное количество элементов списка значений
//   Уникальные (Булево) - Исключить повторяющиеся элементы
// 
// Возвращаемое значение:
//   Массив [ Произвольный ] 
////
Функция МассивСлучайныхЭлементовСпискаЗначений(СписокЗначений, Количество, Уникальные = Истина) Экспорт 
	
	Массив = Новый Массив;
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат Массив;	
	КонецЕсли;
	
	МассивСлучайныхЧисел = МассивСлучайныхЧисел(Количество, 0, СписокЗначений.Количество() - 1, Уникальные);

	Для Каждого ЭлементМассива Из МассивСлучайныхЧисел Цикл 
		Массив.Вставить(СписокЗначений[ЭлементМассива].Значение);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Фиксированный массив случайных элементов списка значений 
//
// Параметры:
//   СписокЗначений (СписокЗначений) - Список данных
//   Количество (Число) - Максимальное количество элементов списка значений
//   Уникальные (Булево) - Исключить повторяющиеся элементы
// 
// Возвращаемое значение:
//   ФиксированныйМассив [ Произвольный ] 
////
Функция ФиксированныйМассивСлучайныхЭлементовСпискаЗначений(СписокЗначений, Количество, Уникальные = Истина) Экспорт
	
	Возврат МассивВФиксированыйМассив(
		МассивСлучайныхЭлементовСпискаЗначений(СписокЗначений, Количество, Уникальные)
	);
	
КонецФункции

// Список значений случайных элементов списка значений 
//
// Параметры:
//   СписокЗначений (СписокЗначений) - Список данных
//   Количество (Число) - Максимальное количество элементов списка значений
//   Уникальные (Булево) - Исключить повторяющиеся элементы
// 
// Возвращаемое значение:
//   СписокЗначений [ Произвольный ] 
////
Функция СписокЗначенийСлучайныхЭлементовСпискаЗначений(СписокЗначений, Количество, Уникальные = Истина) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСлучайныхЭлементовСпискаЗначений(СписокЗначений, Количество, Уникальные)
	);
	
КонецФункции

#КонецОбласти

#Область ТаблицыЗначений

// Случайная строка таблицы значений 
//
// Параметры:
//   ТаблицаЗначений (ТаблицаЗначений) - Таблица данных
//   ПреобразоватьВСтруктуру (Булево) - Преобразовать строку табличной части в структуру, где ключ - имя колонки, а значение - значение колонки в строке
// 
// Возвращаемое значение:
//   СтрокаТаблицыЗначений \ Структура \ Неопределено
////
Функция СлучайнаяСтрокаТаблицыЗначений(ТаблицаЗначений, ПреобразоватьВСтруктуру = Ложь) Экспорт 	
	
	Массив = МассивСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, 1, , ПреобразоватьВСтруктуру);
	
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Массив[0];
		
КонецФункции

// Таблица значений случайных строк таблицы значений 
//
// Параметры:
//   ТаблицаЗначений (ТаблицаЗначений) - Таблица данных
//   Количество (Число) - Максимальное количество строк таблицы значений
//   Уникальные (Булево) - Исключить повторяющиеся элементы
// 
// Возвращаемое значение:
//   ТаблицаЗначений
////
Функция ТаблицаЗначенийСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, Количество, Уникальные = Истина) Экспорт 
	
	НоваяТаблицаЗначений = ТаблицаЗначений.СкопироватьКолонки();
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат НоваяТаблицаЗначений;	
	КонецЕсли;
	
	МассивСлучайныхЧисел = МассивСлучайныхЧисел(Количество, 0, ТаблицаЗначений.Количество() - 1, Уникальные);
	
	Для Каждого ЭлементМассива Из МассивСлучайныхЧисел Цикл
		ЗаполнитьЗначенияСвойств(НоваяТаблицаЗначений.Добавить(), ТаблицаЗначений[ЭлементМассива]);
	КонецЦикла;
	
	Возврат НоваяТаблицаЗначений;
	
КонецФункции

// Массив случайных строк таблицы значений 
//
// Параметры:
//   ТаблицаЗначений (ТаблицаЗначений) - Таблица данных
//   Количество (Число) - Максимальное количество строк таблицы значений
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//   ПреобразоватьВСтруктуру (Булево) - Преобразовать строку табличной части в структуру, где ключ - имя колонки, а значение - значение колонки в строке
// 
// Возвращаемое значение:
//   Массив [ СтрокаТаблицыЗначений \ Структура ]
////
Функция МассивСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, Количество, Уникальные = Истина, ПреобразоватьВСтруктуру = Ложь) Экспорт 
	
	Массив = Новый Массив;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат Массив;	
	КонецЕсли;
	
	НоваяТаблицаЗначений = ТаблицаЗначенийСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, Количество, Уникальные);
	
	Для Каждого СтрокаТаблицыЗначений Из НоваяТаблицаЗначений Цикл
		Массив.Добавить(
			?(ПреобразоватьВСтруктуру, СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений, НоваяТаблицаЗначений.Колонки), СтрокаТаблицыЗначений)
		);	
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Фиксированный массив случайных строк таблицы значений 
//
// Параметры:
//   ТаблицаЗначений (ТаблицаЗначений) - Таблица данных
//   Количество (Число) - Максимальное количество строк таблицы значений
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//   ПреобразоватьВСтруктуру (Булево) - Преобразовать строку табличной части в структуру, где ключ - имя колонки, а значение - значение колонки в строке
// 
// Возвращаемое значение:
//   ФиксированныйМассив [ СтрокаТаблицыЗначений \ Структура ]
////
Функция ФиксированныйМассивСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, Количество, Уникальные = Истина, ПреобразоватьВСтруктуру = Ложь) Экспорт 
	
	Возврат МассивВФиксированыйМассив(
		МассивСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, Количество, Уникальные, ПреобразоватьВСтруктуру)
	);
	
КонецФункции

// Список значений случайных строк таблицы значений 
//
// Параметры:
//   ТаблицаЗначений (ТаблицаЗначений) - Таблица данных
//   Количество (Число) - Максимальное количество строк таблицы значений
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//   ПреобразоватьВСтруктуру (Булево) - Преобразовать строку табличной части в структуру, где ключ - имя колонки, а значение - значение колонки в строке
// 
// Возвращаемое значение:
//   СписокЗначений [ СтрокаТаблицыЗначений \ Структура ]
////
Функция СписокЗначенийСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, Количество, Уникальные = Истина, ПреобразоватьВСтруктуру = Ложь) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСлучайныхСтрокТаблицыЗначений(ТаблицаЗначений, Количество, Уникальные, ПреобразоватьВСтруктуру)
	);
	
КонецФункции

#КонецОбласти

#Область Числа

// Случайное число 
// 
// Параметры:
//   ГенераторСлучайныхЧисел (ГенераторСлучайныхЧисел \ Неопределено) - Генератор случайных чисел
//   НижняяГраница (Число) - Нижняя граница диапазона
//   ВерхняяГраница (Число) - Верхняя граница диапазона
// 
// Возвращаемое значение:
//   Число
////
Функция СлучайноеЧисло(ГенераторСлучайныхЧисел = Неопределено, НижняяГраница = 0, ВерхняяГраница = 4294967295) Экспорт 
	
	Если ГенераторСлучайныхЧисел = Неопределено Тогда
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЕсли;
	
	Возврат ГенераторСлучайныхЧисел.СлучайноеЧисло(НижняяГраница, ВерхняяГраница);
	
КонецФункции

// Массив случайных чисел 
// 
// Параметры:
//   Количество (Число) - Максимальное количество чисел
//   НижняяГраница (Число) - Нижняя граница диапазона
//   ВерхняяГраница (Число) - Верхняя граница диапазона
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//
// Возвращаемое значение:
//   Массив [ Число ]
////
Функция МассивСлучайныхЧисел(Количество, НижняяГраница = 0, ВерхняяГраница = 4294967295, Уникальные = Истина) Экспорт 
	
	ГенераторСлучайныхЧисел = Неопределено;
	
	Массив = Новый Массив;
	
	Пока Массив.Количество() <> Количество Цикл
		СлучайноеЧисло = СлучайноеЧисло(ГенераторСлучайныхЧисел, НижняяГраница, ВерхняяГраница);
		
		Если Уникальные Тогда
			Если Массив.Найти(СлучайноеЧисло) = Неопределено Тогда
				Массив.Добавить(СлучайноеЧисло);	
			КонецЕсли;
			
			Если Массив.Количество() = ВерхняяГраница - НижняяГраница + 1 Тогда
				Прервать;	
			КонецЕсли;
		Иначе
			Массив.Добавить(СлучайноеЧисло);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Фиксированный массив случайных чисел 
// 
// Параметры:
//   Количество (Число) - Максимальное количество чисел
//   НижняяГраница (Число) - Нижняя граница диапазона
//   ВерхняяГраница (Число) - Верхняя граница диапазона
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//
// Возвращаемое значение:
//   ФиксированныйМассив [ Число ] 
////
Функция ФиксированныйМассивСлучайныхЧисел(Количество, НижняяГраница = 0, ВерхняяГраница = 4294967295, Уникальные = Истина) Экспорт 
	
	Возврат МассивВФиксированыйМассив(
		МассивСлучайныхЧисел(Количество, НижняяГраница, ВерхняяГраница, Уникальные)
	);
	
КонецФункции

// Список значений случайных чисел 
// 
// Параметры:
//   Количество (Число) - Максимальное количество чисел
//   НижняяГраница (Число) - Нижняя граница диапазона
//   ВерхняяГраница (Число) - Верхняя граница диапазона
//   Уникальные (Булево) - Исключить повторяющиеся элементы
//
// Возвращаемое значение:
//   СписокЗначений [ Число ]
////
Функция СписокЗначенийСлучайныхЧисел(Количество, НижняяГраница = 0, ВерхняяГраница = 4294967295, Уникальные = Истина) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСлучайныхЧисел(Количество, НижняяГраница, ВерхняяГраница, Уникальные)
	);
	
КонецФункции

#КонецОбласти

#Область СимволыСтроки

// Случайный символ 
// 
// Параметры:
//   ГенераторСлучайныхЧисел (ГенераторСлучайныхЧисел \ Неопределено) - Генератор случайных чисел
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   Строка
////
Функция СлучайныйСимвол(ГенераторСлучайныхЧисел = Неопределено, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда 
		Параметры = ПолучитьСтруктуруПараметровГСС();	
	КонецЕсли;
	
	Структура = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из Параметры Цикл 
		Если ЭлементСтруктуры.Значение = Истина Тогда
			Структура.Вставить(1, ЭлементСтруктуры.Ключ); 		
		КонецЕсли;
	КонецЦикла;
	
	СлучайноеЧисло = СлучайноеЧисло(ГенераторСлучайныхЧисел, 1, Структура.Количество());
	
	ТипСимвола = Структура[СлучайноеЧисло];
		
	Если ТипСимвола = "Числа" Тогда
		НижняяГраница = 48;   
		ВерхняяГраница = 57;
	ИначеЕсли ТипСимвола = "РусскиеБуквы" Тогда
		// Не включает букву ё - 1105
		НижняяГраница = 1072; 
		ВерхняяГраница = 1103;
	ИначеЕсли ТипСимвола = "РусскиеБуквыЗаглавные" Тогда
		// Не включает букву Ё - 1025
		НижняяГраница = 1040; 
		ВерхняяГраница = 1071;
	ИначеЕсли ТипСимвола = "АнглийскиеБуквы" Тогда
		НижняяГраница = 97;   
		ВерхняяГраница = 122;
	ИначеЕсли ТипСимвола = "АнглийскиеБуквыЗаглавные" Тогда
		НижняяГраница = 65;   
		ВерхняяГраница = 90;
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
	
	Возврат Символ(СлучайноеЧисло( , НижняяГраница, ВерхняяГраница));
	
КонецФункции

// Массив случайных символов 
// 
// Параметры:
//   Количество (Число) - Максимальное количество символов
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   Массив [ Строка ]
////
Функция МассивСлучайныхСимволов(Количество, Параметры = Неопределено) Экспорт 
	
	ГенераторСлучайныхЧисел = Неопределено;
	
	Массив = Новый Массив;
	
	Для Н = 1 По Количество Цикл
		Массив.Добавить(
			СлучайныйСимвол(ГенераторСлучайныхЧисел, Параметры)
		);			
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Фиксированный массив случайных символов 
// 
// Параметры:
//   Количество (Число) - Максимальное количество символов
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   ФиксированныйМассив [ Строка ]
////
Функция ФиксированныйМассивСлучайныхСимволов(Количество, Параметры = Неопределено) Экспорт 
	
	Возврат МассивВФиксированыйМассив(
		МассивСлучайныхСимволов(Количество, Параметры = Неопределено)
	);
	
КонецФункции

// Список значений случайных символов 
//
// Параметры:
//   Количество (Число) - Максимальное количество символов
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   СписокЗначений [ Строка ]
////
Функция СписокЗначенийСлучайныхСимволов(Количество, Параметры = Неопределено) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСлучайныхСимволов(Количество, Параметры)
	);
	
КонецФункции

// Строка случайных символов 
// 
// Параметры:
//   ДлиннаСтроки (Число) - Количество символов в строке
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   Строка
////
Функция СтрокаСлучайныхСимволов(ДлиннаСтроки, Параметры = Неопределено) Экспорт 
		
	Возврат _СтрСоединить(
		МассивСлучайныхСимволов(ДлиннаСтроки, Параметры), ""
	);
	
КонецФункции

// Массив строк случайных символов 
//
// Параметры:
//   Количество (Число) - Количество строк
//   ДлиннаСтроки (Число) - Количество символов в строке
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   Массив [ Строка ]
////
Функция МассивСтрокСлучайныхСимволов(Количество, ДлиннаСтроки, Параметры = Неопределено) Экспорт 
	
	Массив = Новый Массив;
	
	Для Н = 1 По Количество Цикл 
		Массив.Добавить(
			СтрокаСлучайныхСимволов(ДлиннаСтроки, Параметры)
		);			
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Фиксированный массив строк случайных символов 
//
// Параметры:
//   Количество (Число) - Количество строк
//   ДлиннаСтроки (Число) - Количество символов в строке
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   ФиксированныйМассив [ Строка ]
////
Функция ФиксированныйМассивСтрокСлучайныхСимволов(Количество, ДлиннаСтроки, Параметры = Неопределено) Экспорт 
	
	Возврат МассивВФиксированыйМассив(
		МассивСтрокСлучайныхСимволов(Количество, ДлиннаСтроки, Параметры)
	);
	
КонецФункции

// Список значений строк случайных символов 
//
// Параметры:
//   Количество (Число) - Количество строк
//   ДлиннаСтроки (Число) - Количество символов в строке
//   Параметры (Структура \ Неопределено) - Структура параметров генератора случайных символов, формируется функцией ПолучитьСтруктуруПараметровГСС 
//
// Возвращаемое значение:
//   СписокЗначений [ Строка ]
////
Функция СписокЗначенийСтрокСлучайныхСимволов(Количество, ДлиннаСтроки, Параметры = Неопределено) Экспорт 
	
	Возврат МассивВСписокЗначений(
		МассивСтрокСлучайныхСимволов(Количество, ДлиннаСтроки, Параметры)
	);
	
КонецФункции

// Рыбный текст 
//
// Параметры:
//   ДлиннаСтроки (Число) - Количество символов в строке
//   Язык (Строка) - Выбор языка (рус, eng)
// 
// Возвращаемое значение:
//   Строка
////
Функция РыбныйТекст(ДлиннаСтроки, Язык = "рус") Экспорт 
		
	Если НРег(Язык) = "рус" Тогда
		Шаблон = "Следует отметить, что семантический разбор внешних противодействий требует анализа инновационных методов управления процессами. Противоположная точка зрения подразумевает, что многие известные личности неоднозначны и будут подвергнуты целой серии независимых исследований. С другой стороны, новая модель организационной деятельности является качественно новой ступенью инновационных методов управления процессами.";	
	ИначеЕсли НРег(Язык) = "eng" Тогда
		Шаблон = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.";
	Иначе
		ВызватьИсключение "Неизвестный язык";	
	КонецЕсли;
	
	ЛоремИпсум = Шаблон;
	
	Пока СтрДлина(ЛоремИпсум) < ДлиннаСтроки Цикл 
		ЛоремИпсум = ЛоремИпсум + " " + Шаблон;	
	КонецЦикла;
	
	Возврат Лев(ЛоремИпсум, ДлиннаСтроки);
	
КонецФункции

#КонецОбласти

#Область Параметры

// Добавить отбор в массив параметров отбора 
//
// Параметры:
//   ПараметрыОтбора (Массив \ Неопределено) - Массив параметров отбора.
//   ИмяРеквизита (Строка) - Имя реквизита, по которому производится отбор, можно использовать отбор через точку
//   Значение (Произвольный) - Значение реквизита отбора
//   ВидСравнения (ВидСравненияКомпоновкиДанных \ Неопределено) - Вид сравнения в отборе
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура { ИмяРеквизита (Строка), Значение (Произвольный), ВидСравнения (ВидСравненияКомпоновкиДанных) }
////
Функция ДобавитьПараметрОтбора(ПараметрыОтбора = Неопределено, ИмяРеквизита, Значение, ВидСравнения = Неопределено) Экспорт 
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Массив;	
	КонецЕсли;
	
	ПараметрыОтбора.Добавить(
		ПолучитьСтруктуруПараметровОтбора(ИмяРеквизита, Значение, ВидСравнения)
	);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Структура отбора для справочников и документов 
//
// Параметры: 
//   ИмяРеквизита (Строка) - Имя реквизита, по которому производится отбор, можно использовать отбор через точку
//   Значение (Произвольный) - Значение реквизита отбора
//   ВидСравнения (ВидСравненияКомпоновкиДанных \ Неопределено) - Вид сравнения в отборе
//
// Возвращаемое значение: 
//   ФиксированнаяСтруктура { ИмяРеквизита (Строка), Значение (Произвольный), ВидСравнения (ВидСравненияКомпоновкиДанных) }
////
Функция ПолучитьСтруктуруПараметровОтбора(ИмяРеквизита, Значение, ВидСравнения = Неопределено) Экспорт 
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяРеквизита", ИмяРеквизита);
	Структура.Вставить("Значение", Значение);
	Структура.Вставить("ВидСравнения", ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения));
	
	Возврат Новый ФиксированнаяСтруктура(Структура);
	
КонецФункции

// Структура параметров для генерации случайных символов 
//
// Параметры: 
//   Числа (Булево \ Неопределено) - Использовать числа 
//   РусскиеБуквы (Булево \ Неопределено) - Использовать русские буквы
//   РусскиеБуквыБольшие (Булево \ Неопределено) - Использовать заглавные русские буквы
//   АнглийскиеБуквы (Булево \ Неопределено) - Использовать английские буквы
//   АнглийскиеБуквыБольшие (Булево \ Неопределено) - Использовать заклавные английские буквы
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура { Числа (Булево), РусскиеБуквы (Булево), РусскиеБуквыЗаглавные (Булево), АнглийскиеБуквы (Булево), АнглийскиеБуквыЗаглавные (Булево) }
////
Функция ПолучитьСтруктуруПараметровГСС(Числа = Истина, РусскиеБуквы = Истина, РусскиеБуквыЗаглавные = Истина, АнглийскиеБуквы = Истина, АнглийскиеБуквыЗаглавные = Истина) Экспорт 
	
	Структура = Новый Структура;
	Структура.Вставить("Числа", Числа);
	Структура.Вставить("РусскиеБуквы", РусскиеБуквы);
	Структура.Вставить("РусскиеБуквыЗаглавные", РусскиеБуквыЗаглавные);
	Структура.Вставить("АнглийскиеБуквы", АнглийскиеБуквы);
	Структура.Вставить("АнглийскиеБуквыЗаглавные", АнглийскиеБуквыЗаглавные);
	
	Возврат Новый ФиксированнаяСтруктура(Структура);
	
КонецФункции

// Устновить максимальное количество 
//
// Параметры:
//   Количество (Число) - Максимальное количество данных в выборке
////
Процедура УстановитьМаксимальноеКоличество(Количество) 
	
	МаксимальноеКоличество = Количество;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыФункции

// Преобразует массив в список значений 
// 
// Параметры:
//   Массив (Массив, ФиксированныйМассив) - Массив данных
// 
// Возвращаемое значение: 
//   СписокЗначений [ Произвольный ]
////
Функция МассивВСписокЗначений(Массив) 
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Массив);
	
	Возврат СписокЗначений;
	
КонецФункции

// Преобразует массив в фиксированный массив 
//
// Параметры:
//   Массив (Массив) - Массив данных
// 
// Возвращаемое значение: 
//   ФиксированныйМассив [ Произвольный ]
////
Функция МассивВФиксированыйМассив(Массив) 
	
	Возврат Новый ФиксированныйМассив(Массив)
	
КонецФункции

// Преобразует структуру в фиксированную структуру 
//
// Параметры:
//   Структура (Структура) - Структура данных
// 
// Возвращаемое значение: 
//   ФиксированнаяСтруктура 
////
Функция СтруктураВФиксировануюСтруктуру(Структура) 
	
	Возврат Новый ФиксированнаяСтруктура(Структура)
	
КонецФункции

// Преобразует строку табличной части в структуру или фиксированную структуру, 
// где ключ - имя колонки, а значение - значение колонки в строке
//
// Параметры:
//   СтрокаТаблицыЗначений (СтрокаТаблицыЗначений) - Строка таблицы значений
//   Колонки (КоллекцияКолонокТаблицыЗначений) - Коллекция колонок таблицы значений
//   Фиксированая (Булево) - Преобразовать результат в фиксированную структуру
// 
// Возвращаемое значение: 
//   Структура { ИмяКолонки (Строка) : Значение (Произвольный) }
//   ФиксированнаяСтруктура { ИмяКолонки (Строка) : Значение (Произвольный) }
////
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений, Колонки, Фиксированая = Ложь) 
	
	Структура = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат ?(Фиксированая, СтруктураВФиксировануюСтруктуру(Структура), Структура);

КонецФункции

// Проверяет существует ли реквизит метаданных 
//
// Параметры: 
//   Тип (Строка) - Тип метаданных (Справочники, Документы и тп)
//   Имя (Строка) - Имя метаданных (Номенклатура, ЗаказПокупателя и тп)
//   ИмяРеквизита (Строка) - Имя реквизита
//
// Возвращаемое значение: 
//   Булево
////
Функция ЕстьРеквизитМетаданных(ИмяКоллекция, ИмяОбъекта, ИмяРеквизита) 
	
	ОбъектМетаданных = Метаданные[ИмяКоллекция][ИмяОбъекта];
	
	Если ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат Истина;	
	Иначе
		Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			Если СтандартныйРеквизит.Имя = ИмяРеквизита Тогда
				Возврат Истина;	
			КонецЕсли;
		КонецЦикла;	
		
		Возврат	Ложь;
	КонецЕсли;
	
КонецФункции

// Аналог функции СтрСоединить() для платформы < 8.3.6 
//
// Параметры: 
//   МассивСтрок (Массив [ Строка ]) - Массив строк
//   Разделитель (Строка \ Неопределено) - Разделитель 
//
// Возвращаемое значение: 
//   Строка
////
Функция _СтрСоединить(МассивСтрок, Разделитель = Неопределено) 
	
	Результат = "";
	
	Если Разделитель = Неопределено Тогда
		Разделитель = "";
	КонецЕсли;
	
	Если МассивСтрок.Количество() Тогда
		Результат = МассивСтрок[0];
	КонецЕсли;
	
	Для Й = 1 По МассивСтрок.ВГраница() Цикл
		Результат = Результат + Разделитель + МассивСтрок[Й];
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
